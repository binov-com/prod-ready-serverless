service: slsProdReady
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  profile: bessam
  stage: dev
  region: us-east-2
  endpointType: REGIONAL

  environment:
    customersTable: ${self:custom.customersTable}
    bucketName: ${self:custom.bucketName}

  lambdaHashingVersion: 20201221

plugins:
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-s3-sync

package:
  individually: true

custom:
  customersTable: customers
  bucketName: com.binov.prod-ready

functions:
  getCustomer:
    handler: lambdas/endpoints/getCustomer.handler
    iamRoleStatementsName: get-customer-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.customersTable}"
    events:
      - http:
          path: get-customer/{ID}
          method: GET
          cors: true
  createCustomer:
    handler: lambdas/endpoints/createCustomer.handler
    iamRoleStatementsName: create-customer-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.customersTable}"
    events:
      - http:
          path: create-customer/{ID}
          method: POST
          cors: true
  createFile:
    handler: lambdas/endpoints/createFile.handler
    iamRoleStatementsName: create-file-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:PutObject
        Resource: "arn:aws:s3:::${self:custom.bucketFiles}/*"
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true
  getFile:
    handler: lambdas/endpoints/getFile.handler
    iamRoleStatementsName: get-file-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: "arn:aws:s3:::${self:custom.bucketFiles}/*"
    events:
      - http:
          path: get-file/{fileName}
          method: GET
          cors: true
  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    iamRoleStatementsName: send-email-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - ses:SendEmail
        Resource: "*"
        Condition:
          StringEquals:
            ses:FromAddress: "bessam@binov.com"
    events:
      - http:
          path: send-email
          method: POST
          cors: true

resources:
  Resources:
    bucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketFName}
    dynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.customersTable}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # BillingMode: PAY_PER_REQUEST
